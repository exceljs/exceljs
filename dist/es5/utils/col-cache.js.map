{"version":3,"sources":["../../../lib/utils/col-cache.js"],"names":["colCache","module","exports","_dictionary","_l2n","_n2l","_level","n","_fill","level","c","v","l1","l2","l3","Math","floor","l2n","l","length","Error","n2l","_hash","validateAddress","value","match","decodeAddress","addr","matchCol","col","colNumber","matchRow","row","rowNumber","parseInt","address","$col$row","getAddress","r","decode","parts","split","tl","br","result","top","min","left","bottom","max","right","dimensions","decodeEx","groups","sheetName","reference","startsWith","error","Object","assign","encodeAddress","encode","arguments"],"mappings":"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","file":"col-cache.js","sourcesContent":["/**\n * Copyright (c) 2014-2017 Guyon Roche\n * LICENCE: MIT - please refer to LICENCE file included with this module\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\n */\n\n'use strict';\n\n// =========================================================================\n// Column Letter to Number conversion\nvar colCache = module.exports = {\n  _dictionary: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n  _l2n: {},\n  _n2l: [],\n  _level: function(n) {\n    if (n <= 26) { return 1; }\n    if (n <= 26 * 26) { return 2; }\n    return 3;\n  },\n  _fill: function(level) {\n    var c, v, l1, l2, l3;\n    var n = 1;\n    if (level >= 1) {\n      while (n <= 26) {\n        c = this._dictionary[n - 1];\n        this._n2l[n] = c;\n        this._l2n[c] = n;\n        n++;\n      }\n    }\n    if (level >= 2) {\n      while (n <= 26 + (26 * 26)) {\n        v = n - (26 + 1);\n        l1 = v % 26;\n        l2 = Math.floor(v / 26);\n        c = this._dictionary[l2] + this._dictionary[l1];\n        this._n2l[n] = c;\n        this._l2n[c] = n;\n        n++;\n      }\n    }\n    if (level >= 3) {\n      while (n <= 16384) {\n        v = n - ((26 * 26) + 26 + 1);\n        l1 = v % 26;\n        l2 = Math.floor(v / 26) % 26;\n        l3 = Math.floor(v / (26 * 26));\n        c = this._dictionary[l3] + this._dictionary[l2] + this._dictionary[l1];\n        this._n2l[n] = c;\n        this._l2n[c] = n;\n        n++;\n      }\n    }\n  },\n  l2n: function(l) {\n    if (!this._l2n[l]) {\n      this._fill(l.length);\n    }\n    if (!this._l2n[l]) {\n      throw new Error('Out of bounds. Invalid column letter: ' + l);\n    }\n    return this._l2n[l];\n  },\n  n2l: function(n) {\n    if ((n < 1) || (n > 16384)) {\n      throw new Error('' + n + ' is out of bounds. Excel supports columns from 1 to 16384');\n    }\n    if (!this._n2l[n]) {\n      this._fill(this._level(n));\n    }\n    return this._n2l[n];\n  },\n\n  // =========================================================================\n  // Address processing\n  _hash: {},\n\n  // check if value looks like an address\n  validateAddress: function(value) {\n    if (!value.match(/^[A-Z]+\\d+$/)) {\n      throw new Error('Invalid Address: ' + value);\n    }\n    return true;\n  },\n\n  // convert address string into structure\n  decodeAddress: function(value) {\n    var addr = this._hash[value];\n    if (addr) {\n      return addr;\n    }\n    var matchCol = value.match(/[A-Z]+/);\n    var col;\n    var colNumber;\n    if (matchCol) {\n      col = matchCol[0];\n      colNumber = this.l2n(col);\n    }\n    var matchRow = value.match(/\\d+/);\n    var row;\n    var rowNumber;\n    if (matchRow) {\n      row = matchRow[0];\n      rowNumber = parseInt(row, 10);\n    }\n\n    // in case $row$col\n    value = (col || '') + (row || '');\n\n    var address = {\n      address: value,\n      col: colNumber,\n      row: rowNumber,\n      $col$row: '$' + (col || '') + '$' + (row || '')\n    };\n\n    // mem fix - cache only the tl 100x100 square\n    if ((colNumber <= 100) && (rowNumber <= 100)) {\n      this._hash[value] = address;\n      this._hash[address.$col$row] = address;\n    }\n\n    return address;\n  },\n\n  // convert r,c into structure (if only 1 arg, assume r is address string)\n  getAddress: function(r, c) {\n    if (c) {\n      var address = this.n2l(c) + r;\n      return this.decodeAddress(address);\n    }\n    return this.decodeAddress(r);\n  },\n\n  // convert [address], [tl:br] into address structures\n  decode: function(value) {\n    var parts = value.split(':');\n    if (parts.length === 2) {\n      var tl = this.decodeAddress(parts[0]);\n      var br = this.decodeAddress(parts[1]);\n      var result = {\n        top: Math.min(tl.row, br.row),\n        left: Math.min(tl.col, br.col),\n        bottom: Math.max(tl.row, br.row),\n        right: Math.max(tl.col, br.col)\n      };\n      // reconstruct tl, br and dimensions\n      result.tl = this.n2l(result.left) + result.top;\n      result.br = this.n2l(result.right) + result.bottom;\n      result.dimensions = result.tl + ':' + result.br;\n      return result;\n    }\n    return this.decodeAddress(value);\n  },\n\n  // convert [sheetName!][$]col[$]row[[$]col[$]row] into address or range structures\n  decodeEx: function(value) {\n    var groups = value.match(/(?:(?:(?:'((?:[^']|'')*)')|([^'^ !]*))!)?(.*)/);\n\n    var sheetName = groups[1] || groups[2]; // Qouted and unqouted groups\n    var reference = groups[3]; // Remaining address\n\n    var parts = reference.split(':');\n    if (parts.length > 1) {\n      var tl = this.decodeAddress(parts[0]);\n      var br = this.decodeAddress(parts[1]);\n      var top = Math.min(tl.row, br.row);\n      var left = Math.min(tl.col, br.col);\n      var bottom = Math.max(tl.row, br.row);\n      var right = Math.max(tl.col, br.col);\n\n      tl = this.n2l(left) + top;\n      br = this.n2l(right) + bottom;\n\n      return {\n        top: top,\n        left: left,\n        bottom: bottom,\n        right: right,\n        sheetName: sheetName,\n        tl: { address: tl, col: left, row: top, $col$row: '$' + this.n2l(left) + '$' + top, sheetName: sheetName },\n        br: { address: br, col: right, row: bottom, $col$row: '$' + this.n2l(right) + '$' + bottom, sheetName: sheetName },\n        dimensions: tl + ':' + br\n      };\n    } else if (reference.startsWith('#')) {\n      return sheetName ? {sheetName: sheetName, error: reference} : {error: reference};\n    }\n\n    var address = this.decodeAddress(reference);\n    return sheetName ? Object.assign({sheetName: sheetName}, address) : address;\n  },\n\n  // convert row,col into address string\n  encodeAddress: function(row, col) {\n    return colCache.n2l(col) + row;\n  },\n\n  // convert row,col into string address or t,l,b,r into range\n  encode: function() {\n    switch (arguments.length) {\n      case 2:\n        return colCache.encodeAddress(arguments[0], arguments[1]);\n      case 4:\n        return colCache.encodeAddress(arguments[0], arguments[1]) + ':' + colCache.encodeAddress(arguments[2], arguments[3]);\n      default:\n        throw new Error('Can only encode with 2 or 4 arguments');\n    }\n  }\n};\n"]}