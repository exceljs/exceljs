{"version":3,"sources":["../../../lib/utils/string-buf.js"],"names":["StringBuf","module","exports","options","_buf","Buffer","size","_encoding","encoding","_inPos","_buffer","undefined","prototype","length","capacity","buffer","toBuffer","copy","reset","position","_grow","min","buf","addText","text","inPos","write","addStringBuf","inBuf"],"mappings":"AAAA;;;;;;AAMA;;AAEA;AACA;;AACA,IAAIA,YAAYC,OAAOC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AACjD,OAAKC,IAAL,GAAY,IAAIC,MAAJ,CAAYF,WAAWA,QAAQG,IAApB,IAA6B,KAAxC,CAAZ;AACA,OAAKC,SAAL,GAAkBJ,WAAWA,QAAQK,QAApB,IAAiC,MAAlD;;AAEA;AACA,OAAKC,MAAL,GAAc,CAAd;;AAEA;AACA,OAAKC,OAAL,GAAeC,SAAf;AACD,CATD;;AAWAX,UAAUY,SAAV,GAAsB;;AAEpB,MAAIC,MAAJ,GAAa;AACX,WAAO,KAAKJ,MAAZ;AACD,GAJmB;AAKpB,MAAIK,QAAJ,GAAe;AACb,WAAO,KAAKV,IAAL,CAAUS,MAAjB;AACD,GAPmB;AAQpB,MAAIE,MAAJ,GAAa;AACX,WAAO,KAAKX,IAAZ;AACD,GAVmB;;AAYpBY,YAAU,oBAAW;AACnB;AACA,QAAI,CAAC,KAAKN,OAAV,EAAmB;AACjB,WAAKA,OAAL,GAAe,IAAIL,MAAJ,CAAW,KAAKQ,MAAhB,CAAf;AACA,WAAKT,IAAL,CAAUa,IAAV,CAAe,KAAKP,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAKG,MAAxC;AACD;AACD,WAAO,KAAKH,OAAZ;AACD,GAnBmB;;AAqBpBQ,SAAO,eAASC,QAAT,EAAmB;AACxBA,eAAWA,YAAY,CAAvB;AACA,SAAKT,OAAL,GAAeC,SAAf;AACA,SAAKF,MAAL,GAAcU,QAAd;AACD,GAzBmB;;AA2BpBC,SAAO,eAASC,GAAT,EAAc;AACnB,QAAIf,OAAO,KAAKF,IAAL,CAAUS,MAAV,GAAmB,CAA9B;AACA,WAAOP,OAAOe,GAAd,EAAmB;AAAEf,cAAQ,CAAR;AAAY;AACjC,QAAIgB,MAAM,IAAIjB,MAAJ,CAAWC,IAAX,CAAV;AACA,SAAKF,IAAL,CAAUa,IAAV,CAAeK,GAAf,EAAoB,CAApB;AACA,SAAKlB,IAAL,GAAYkB,GAAZ;AACD,GAjCmB;;AAmCpBC,WAAS,iBAASC,IAAT,EAAe;AACtB,SAAKd,OAAL,GAAeC,SAAf;;AAEA,QAAIc,QAAQ,KAAKhB,MAAL,GAAc,KAAKL,IAAL,CAAUsB,KAAV,CAAgBF,IAAhB,EAAsB,KAAKf,MAA3B,EAAmC,KAAKF,SAAxC,CAA1B;;AAEA;AACA,WAAOkB,SAAS,KAAKrB,IAAL,CAAUS,MAAV,GAAmB,CAAnC,EAAsC;AACpC,WAAKO,KAAL,CAAW,KAAKX,MAAL,GAAce,KAAKX,MAA9B;;AAEA;AACAY,cAAQ,KAAKhB,MAAL,GAAc,KAAKL,IAAL,CAAUsB,KAAV,CAAgBF,IAAhB,EAAsB,KAAKf,MAA3B,EAAmC,KAAKF,SAAxC,CAAtB;AACD;;AAED,SAAKE,MAAL,GAAcgB,KAAd;AACD,GAjDmB;;AAmDpBE,gBAAc,sBAASC,KAAT,EAAgB;AAC5B,QAAIA,MAAMf,MAAV,EAAkB;AAChB,WAAKH,OAAL,GAAeC,SAAf;;AAEA,UAAI,KAAKE,MAAL,GAAce,MAAMf,MAApB,GAA6B,KAAKC,QAAtC,EAAgD;AAC9C,aAAKM,KAAL,CAAW,KAAKP,MAAL,GAAce,MAAMf,MAA/B;AACD;AACD;AACAe,YAAMxB,IAAN,CAAWa,IAAX,CAAgB,KAAKb,IAArB,EAA2B,KAAKK,MAAhC,EAAwC,CAAxC,EAA2CmB,MAAMf,MAAjD;AACA,WAAKJ,MAAL,IAAemB,MAAMf,MAArB;AACD;AACF;AA9DmB,CAAtB","file":"string-buf.js","sourcesContent":["/**\n * Copyright (c) 2015-2017 Guyon Roche\n * LICENCE: MIT - please refer to LICENCE file included with this module\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\n */\n\n'use strict';\n\n// StringBuf - a way to keep string memory operations to a minimum\n// while building the strings for the xml files\nvar StringBuf = module.exports = function(options) {\n  this._buf = new Buffer((options && options.size) || 16384);\n  this._encoding = (options && options.encoding) || 'utf8';\n\n  // where in the buffer we are at\n  this._inPos = 0;\n\n  // for use by toBuffer()\n  this._buffer = undefined;\n};\n\nStringBuf.prototype = {\n\n  get length() {\n    return this._inPos;\n  },\n  get capacity() {\n    return this._buf.length;\n  },\n  get buffer() {\n    return this._buf;\n  },\n\n  toBuffer: function() {\n    // return the current data as a single enclosing buffer\n    if (!this._buffer) {\n      this._buffer = new Buffer(this.length);\n      this._buf.copy(this._buffer, 0, 0, this.length);\n    }\n    return this._buffer;\n  },\n\n  reset: function(position) {\n    position = position || 0;\n    this._buffer = undefined;\n    this._inPos = position;\n  },\n\n  _grow: function(min) {\n    var size = this._buf.length * 2;\n    while (size < min) { size *= 2; }\n    var buf = new Buffer(size);\n    this._buf.copy(buf, 0);\n    this._buf = buf;\n  },\n\n  addText: function(text) {\n    this._buffer = undefined;\n\n    var inPos = this._inPos + this._buf.write(text, this._inPos, this._encoding);\n\n    // if we've hit (or nearing capacity), grow the buf\n    while (inPos >= this._buf.length - 4) {\n      this._grow(this._inPos + text.length);\n\n      // keep trying to write until we've completely written the text\n      inPos = this._inPos + this._buf.write(text, this._inPos, this._encoding);\n    }\n\n    this._inPos = inPos;\n  },\n\n  addStringBuf: function(inBuf) {\n    if (inBuf.length) {\n      this._buffer = undefined;\n\n      if (this.length + inBuf.length > this.capacity) {\n        this._grow(this.length + inBuf.length);\n      }\n      // eslint-disable-next-line no-underscore-dangle\n      inBuf._buf.copy(this._buf, this._inPos, 0, inBuf.length);\n      this._inPos += inBuf.length;\n    }\n  }\n};\n"]}