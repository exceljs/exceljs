{"version":3,"sources":["../../../lib/csv/stream-converter.js"],"names":["jconv","StreamConverter","module","exports","inner","options","innerEncoding","toUpperCase","outerEncoding","innerBOM","outerBOM","writeStarted","prototype","convertInwards","data","Buffer","convert","convertOutwards","addListener","event","handler","removeListener","write","encoding","callback","Function","undefined","length","bomless","copy","read","pipe","destination","reverseConverter","close","on","type","chunk","once","end","emit","value"],"mappings":"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","file":"stream-converter.js","sourcesContent":["'use strict';\n\n// =======================================================================================================\n// StreamConverter\n//\n// convert between encoding schemes in a stream\n// Work in Progress - Will complete this at some point\nvar jconv;\n\nvar StreamConverter = module.exports = function(inner, options) {\n  this.inner = inner;\n\n  options = options || {};\n  this.innerEncoding = (options.innerEncoding || 'UTF8').toUpperCase();\n  this.outerEncoding = (options.outerEncoding || 'UTF8').toUpperCase();\n\n  this.innerBOM = options.innerBOM || null;\n  this.outerBOM = options.outerBOM || null;\n\n  this.writeStarted = false;\n};\n\nStreamConverter.prototype.convertInwards = function(data) {\n  if (data) {\n    if (typeof data === 'string') {\n      data = new Buffer(data, this.outerEncoding);\n    }\n\n    if (this.innerEncoding !== this.outerEncoding) {\n      data = jconv.convert(data, this.outerEncoding, this.innerEncoding);\n    }\n  }\n\n  return data;\n};\nStreamConverter.prototype.convertOutwards = function(data) {\n  if (typeof data === 'string') {\n    data = new Buffer(data, this.innerEncoding);\n  }\n\n  if (this.innerEncoding !== this.outerEncoding) {\n    data = jconv.convert(data, this.innerEncoding, this.outerEncoding);\n  }\n  return data;\n};\n\nStreamConverter.prototype.addListener = function(event, handler) {\n  this.inner.addListener(event, handler);\n};\n\nStreamConverter.prototype.removeListener = function(event, handler) {\n  this.inner.removeListener(event, handler);\n};\n\nStreamConverter.prototype.write = function(data, encoding, callback) {\n  if (encoding instanceof Function) {\n    callback = encoding;\n    encoding = undefined;\n  }\n\n  if (!this.writeStarted) {\n    // if inner encoding has BOM, write it now\n    if (this.innerBOM) {\n      this.inner.write(this.innerBOM);\n    }\n\n    // if outer encoding has BOM, delete it now\n    if (this.outerBOM) {\n      if (data.length <= this.outerBOM.length) {\n        if (callback) { callback(); }\n        return;\n      }\n      var bomless = new Buffer(data.length - this.outerBOM.length);\n      data.copy(bomless, 0, this.outerBOM.length, data.length);\n      data = bomless;\n    }\n\n    this.writeStarted = true;\n  }\n\n  this.inner.write(\n    this.convertInwards(data),\n    encoding ? this.innerEncoding : undefined,\n    callback);\n};\n\nStreamConverter.prototype.read = function() {\n  // TBD\n};\n\nStreamConverter.prototype.pipe = function(destination, options) {\n  var reverseConverter = new StreamConverter(destination, {\n    innerEncoding: this.outerEncoding,\n    outerEncoding: this.innerEncoding,\n    innerBOM: this.outerBOM,\n    outerBOM: this.innerBOM\n  });\n\n  this.inner.pipe(reverseConverter, options);\n};\n\nStreamConverter.prototype.close = function() {\n  this.inner.close();\n};\n\nStreamConverter.prototype.on = function(type, callback) {\n  switch (type) {\n    case 'data':\n      this.inner.on('data', chunk => {\n        callback(this.convertOutwards(chunk));\n      });\n      return this;\n    default:\n      this.inner.on(type, callback);\n      return this;\n  }\n};\n\nStreamConverter.prototype.once = function(type, callback) {\n  this.inner.once(type, callback);\n};\n\nStreamConverter.prototype.end = function(chunk, encoding, callback) {\n  this.inner.end(\n    this.convertInwards(chunk),\n    this.innerEncoding,\n    callback);\n};\n\nStreamConverter.prototype.emit = function(type, value) {\n  this.inner.emit(type, value);\n};\n"]}