{"version":3,"sources":["../../../../../lib/xlsx/xform/drawing/drawing-xform.js"],"names":["utils","require","XmlStream","BaseXform","TwoCellAnchorXform","WorkSheetXform","module","exports","map","inherits","DRAWING_ATTRIBUTES","tag","prepare","model","twoCellAnchorXform","anchors","forEach","item","index","render","xmlStream","openXml","StdDocAttributes","openNode","closeNode","parseOpen","node","parser","name","reset","parseText","text","parseClose","push","undefined","reconcile","options","anchor"],"mappings":"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","file":"drawing-xform.js","sourcesContent":["/**\n * Copyright (c) 2016-2017 Guyon Roche\n * LICENCE: MIT - please refer to LICENCE file included with this module\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\n */\n\n'use strict';\n\nvar utils = require('../../../utils/utils');\nvar XmlStream = require('../../../utils/xml-stream');\n\nvar BaseXform = require('../base-xform');\nvar TwoCellAnchorXform = require('./two-cell-anchor-xform');\n\nvar WorkSheetXform = module.exports = function() {\n  this.map = {\n    'xdr:twoCellAnchor': new TwoCellAnchorXform()\n  };\n};\n\nutils.inherits(WorkSheetXform, BaseXform, {\n  DRAWING_ATTRIBUTES: {\n    'xmlns:xdr': 'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing',\n    'xmlns:a': 'http://schemas.openxmlformats.org/drawingml/2006/main'\n  }\n}, {\n  get tag() { return 'xdr:wsDr'; },\n\n  prepare: function(model) {\n    var twoCellAnchorXform = this.map['xdr:twoCellAnchor'];\n    model.anchors.forEach(function(item, index) {\n      twoCellAnchorXform.prepare(item, {index: index});\n    });\n  },\n\n  render: function(xmlStream, model) {\n    xmlStream.openXml(XmlStream.StdDocAttributes);\n    xmlStream.openNode(this.tag, WorkSheetXform.DRAWING_ATTRIBUTES);\n\n    var twoCellAnchorXform = this.map['xdr:twoCellAnchor'];\n    model.anchors.forEach(function(item) {\n      twoCellAnchorXform.render(xmlStream, item);\n    });\n\n    xmlStream.closeNode();\n  },\n\n  parseOpen: function(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case this.tag:\n        this.reset();\n        this.model = {\n          anchors: [],\n        };\n        break;\n      default:\n        this.parser = this.map[node.name];\n        if (this.parser) {\n          this.parser.parseOpen(node);\n        }\n        break;\n    }\n    return true;\n  },\n\n  parseText: function(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n\n  parseClose: function(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.anchors.push(this.parser.model);\n        this.parser = undefined;\n      }\n      return true;\n    }\n    switch (name) {\n      case this.tag:\n        return false;\n      default:\n        // could be some unrecognised tags\n        return true;\n    }\n  },\n\n  reconcile: function(model, options) {\n    model.anchors.forEach(anchor => {\n      this.map['xdr:twoCellAnchor'].reconcile(anchor, options);\n    });\n  }\n});\n"]}