{"version":3,"sources":["../../../../lib/xlsx/xform/base-xform.js"],"names":["Sax","require","PromishLib","XmlStream","BaseXform","module","exports","prototype","prepare","render","parseOpen","parseText","parseClose","reconcile","reset","model","map","keys","Object","i","length","mergeModel","obj","assign","parse","parser","stream","self","Promish","resolve","reject","abort","error","removeAllListeners","unpipe","on","node","text","name","parseStream","createStream","promise","pipe","xml","toXml","xmlStream"],"mappings":"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","file":"base-xform.js","sourcesContent":["/**\n * Copyright (c) 2015 Guyon Roche\n * LICENCE: MIT - please refer to LICENCE file included with this module\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\n */\n\n'use strict';\n\nvar Sax = require('sax');\nvar PromishLib = require('../../utils/promish');\n\nvar XmlStream = require('../../utils/xml-stream');\n\n// Base class for Xforms\nvar BaseXform = module.exports = function(/* model, name */) {\n};\n\nBaseXform.prototype = {\n  // ============================================================\n  // Virtual Interface\n  prepare: function(/* model, options */) {\n    // optional preparation (mutation) of model so it is ready for write\n  },\n  render: function(/* xmlStream, model */) {\n    // convert model to xml\n  },\n  parseOpen: function(/* node */) {\n    // Sax Open Node event\n  },\n  parseText: function(/* node */) {\n    // Sax Text event\n  },\n  parseClose: function(/* name */) {\n    // Sax Close Node event\n  },\n  reconcile: function(/* model, options */) {\n    // optional post-parse step (opposite to prepare)\n  },\n\n  // ============================================================\n  reset: function() {\n    // to make sure parses don't bleed to next iteration\n    this.model = null;\n\n    // if we have a map - reset them too\n    if (this.map) {\n      var keys = Object.keys(this.map);\n      for (var i = 0; i < keys.length; i++) {\n        this.map[keys[i]].reset();\n      }\n    }\n  },\n  mergeModel: function(obj) {\n    // set obj's props to this.model\n    this.model = Object.assign(\n      this.model || {},\n      obj\n    );\n  },\n\n  parse: function(parser, stream) {\n    var self = this;\n    return new PromishLib.Promish(function(resolve, reject) {\n      function abort(error) {\n        // Abandon ship! Prevent the parser from consuming any more resources\n        parser.removeAllListeners();\n        stream.unpipe(parser);\n        reject(error);\n      }\n\n      parser.on('opentag', function(node) {\n        try {\n          self.parseOpen(node);\n        } catch(error) {\n          abort(error);\n        }\n      });\n      parser.on('text', function(text) {\n        try {\n          self.parseText(text);\n        } catch(error) {\n          abort(error);\n        }\n      });\n      parser.on('closetag', function(name) {\n        try {\n          if (!self.parseClose(name)) {\n            resolve(self.model);\n          }\n        } catch(error) {\n          // console.log('BaseXform closetag', error.stack)\n          abort(error);\n        }\n      });\n      parser.on('end', function() {\n        resolve(self.model);\n      });\n      parser.on('error', function(error) {\n        abort(error);\n      });\n    });\n  },\n  parseStream: function(stream) {\n    var parser = Sax.createStream(true, {});\n    var promise = this.parse(parser, stream);\n    stream.pipe(parser);\n\n    return promise;\n  },\n\n  get xml() {\n    // convenience function to get the xml of this.model\n    // useful for manager types that are built during the prepare phase\n    return this.toXml(this.model);\n  },\n\n  toXml: function(model) {\n    var xmlStream = new XmlStream();\n    this.render(xmlStream, model);\n    return xmlStream.xml;\n  }\n};\n"]}