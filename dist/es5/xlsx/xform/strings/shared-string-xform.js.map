{"version":3,"sources":["../../../../../lib/xlsx/xform/strings/shared-string-xform.js"],"names":["TextXform","require","RichTextXform","PhoneticTextXform","utils","BaseXform","SharedStringXform","module","exports","model","map","r","t","rPh","inherits","tag","render","xmlStream","openNode","hasOwnProperty","richText","forEach","text","undefined","closeNode","parseOpen","node","name","parser","parseText","parseClose","rt","push"],"mappings":"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","file":"shared-string-xform.js","sourcesContent":["/**\n * Copyright (c) 2016 Guyon Roche\n * LICENCE: MIT - please refer to LICENCE file included with this module\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\n */\n\n'use strict';\n\nvar TextXform = require('./text-xform');\nvar RichTextXform = require('./rich-text-xform');\nvar PhoneticTextXform = require('./phonetic-text-xform');\n\nvar utils = require('../../../utils/utils');\nvar BaseXform = require('../base-xform');\n\n// <si>\n//   <r></r><r></r>...\n// </si>\n// <si>\n//   <t></t>\n// </si>\n\nvar SharedStringXform = module.exports = function(model) {\n  this.model = model;\n\n  this.map = {\n    r: new RichTextXform(),\n    t: new TextXform(),\n    rPh: new PhoneticTextXform()\n  };\n};\n\n\nutils.inherits(SharedStringXform, BaseXform, {\n\n  get tag() { return 'si'; },\n\n  render: function(xmlStream, model) {\n    xmlStream.openNode(this.tag);\n    if (model && model.hasOwnProperty('richText') && model.richText) {\n      var r = this.map.r;\n      model.richText.forEach(function(text) {\n        r.render(xmlStream, text);\n      });\n    } else if (model !== undefined && model !== null) {\n      this.map.t.render(xmlStream, model);\n    }\n    xmlStream.closeNode();\n  },\n\n  parseOpen: function(node) {\n    var name = node.name;\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    } else if (name === this.tag) {\n      this.model = {};\n      return true;\n    }\n    this.parser = this.map[name];\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    return false;\n  },\n  parseText: function(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n  parseClose: function(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        switch (name) {\n          case 'r':\n            var rt = this.model.richText;\n            if (!rt) { rt = this.model.richText = []; }\n            rt.push(this.parser.model);\n            break;\n          case 't':\n            this.model = this.parser.model;\n            break;\n          default:\n            break;\n        }\n        this.parser = undefined;\n      }\n      return true;\n    }\n    switch (name) {\n      case this.tag:\n        return false;\n      default:\n        return true;\n    }\n  }\n});\n"]}