{"version":3,"sources":["../../../../../lib/xlsx/xform/strings/rich-text-xform.js"],"names":["TextXform","require","FontXform","utils","BaseXform","RichTextXform","module","exports","model","FONT_OPTIONS","tagName","fontNameTag","inherits","tag","textXform","_textXform","fontXform","_fontXform","render","xmlStream","openNode","font","text","closeNode","parseOpen","node","parser","name","parseText","parseClose","undefined"],"mappings":"AAAA;;;;;;AAMA;;AAEA,IAAIA,YAAYC,QAAQ,cAAR,CAAhB;AACA,IAAIC,YAAYD,QAAQ,qBAAR,CAAhB;;AAEA,IAAIE,QAAQF,QAAQ,sBAAR,CAAZ;AACA,IAAIG,YAAYH,QAAQ,eAAR,CAAhB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAII,gBAAgBC,OAAOC,OAAP,GAAiB,UAASC,KAAT,EAAgB;AACnD,OAAKA,KAAL,GAAaA,KAAb;AACD,CAFD;;AAIAH,cAAcI,YAAd,GAA6B;AAC3BC,WAAS,KADkB;AAE3BC,eAAa;AAFc,CAA7B;;AAKAR,MAAMS,QAAN,CAAeP,aAAf,EAA8BD,SAA9B,EAAyC;;AAEvC,MAAIS,GAAJ,GAAU;AAAE,WAAO,GAAP;AAAa,GAFc;;AAIvC,MAAIC,SAAJ,GAAgB;AAAE,WAAO,KAAKC,UAAL,KAAoB,KAAKA,UAAL,GAAkB,IAAIf,SAAJ,EAAtC,CAAP;AAAgE,GAJ3C;AAKvC,MAAIgB,SAAJ,GAAgB;AAAE,WAAO,KAAKC,UAAL,KAAoB,KAAKA,UAAL,GAAkB,IAAIf,SAAJ,CAAcG,cAAcI,YAA5B,CAAtC,CAAP;AAA0F,GALrE;;AAOvCS,UAAQ,gBAASC,SAAT,EAAoBX,KAApB,EAA2B;AACjCA,YAAQA,SAAS,KAAKA,KAAtB;;AAEAW,cAAUC,QAAV,CAAmB,GAAnB;AACA,QAAIZ,MAAMa,IAAV,EAAgB;AACd,WAAKL,SAAL,CAAeE,MAAf,CAAsBC,SAAtB,EAAiCX,MAAMa,IAAvC;AACD;AACD,SAAKP,SAAL,CAAeI,MAAf,CAAsBC,SAAtB,EAAiCX,MAAMc,IAAvC;AACAH,cAAUI,SAAV;AACD,GAhBsC;;AAkBvCC,aAAW,mBAASC,IAAT,EAAe;AACxB,QAAI,KAAKC,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYF,SAAZ,CAAsBC,IAAtB;AACA,aAAO,IAAP;AACD;AACD,YAAQA,KAAKE,IAAb;AACE,WAAK,GAAL;AACE,aAAKnB,KAAL,GAAa,EAAb;AACA,eAAO,IAAP;AACF,WAAK,GAAL;AACE,aAAKkB,MAAL,GAAc,KAAKZ,SAAnB;AACA,aAAKY,MAAL,CAAYF,SAAZ,CAAsBC,IAAtB;AACA,eAAO,IAAP;AACF,WAAK,KAAL;AACE,aAAKC,MAAL,GAAc,KAAKV,SAAnB;AACA,aAAKU,MAAL,CAAYF,SAAZ,CAAsBC,IAAtB;AACA,eAAO,IAAP;AACF;AACE,eAAO,KAAP;AAbJ;AAeD,GAtCsC;AAuCvCG,aAAW,mBAASN,IAAT,EAAe;AACxB,QAAI,KAAKI,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYE,SAAZ,CAAsBN,IAAtB;AACD;AACF,GA3CsC;AA4CvCO,cAAY,oBAASF,IAAT,EAAe;AACzB,YAAQA,IAAR;AACE,WAAK,GAAL;AACE,eAAO,KAAP;AACF,WAAK,GAAL;AACE,aAAKnB,KAAL,CAAWc,IAAX,GAAkB,KAAKI,MAAL,CAAYlB,KAA9B;AACA,aAAKkB,MAAL,GAAcI,SAAd;AACA,eAAO,IAAP;AACF,WAAK,KAAL;AACE,aAAKtB,KAAL,CAAWa,IAAX,GAAkB,KAAKK,MAAL,CAAYlB,KAA9B;AACA,aAAKkB,MAAL,GAAcI,SAAd;AACA,eAAO,IAAP;AACF;AACE,YAAI,KAAKJ,MAAT,EAAiB;AACf,eAAKA,MAAL,CAAYG,UAAZ,CAAuBF,IAAvB;AACD;AACD,eAAO,IAAP;AAfJ;AAiBD;AA9DsC,CAAzC","file":"rich-text-xform.js","sourcesContent":["/**\n * Copyright (c) 2015 Guyon Roche\n * LICENCE: MIT - please refer to LICENCE file included with this module\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\n */\n\n'use strict';\n\nvar TextXform = require('./text-xform');\nvar FontXform = require('../style/font-xform');\n\nvar utils = require('../../../utils/utils');\nvar BaseXform = require('../base-xform');\n\n// <r>\n//   <rPr>\n//     <sz val=\"11\"/>\n//     <color theme=\"1\" tint=\"5\"/>\n//     <rFont val=\"Calibri\"/>\n//     <family val=\"2\"/>\n//     <scheme val=\"minor\"/>\n//   </rPr>\n//   <t xml:space=\"preserve\"> is </t>\n// </r>\n\nvar RichTextXform = module.exports = function(model) {\n  this.model = model;\n};\n\nRichTextXform.FONT_OPTIONS = {\n  tagName: 'rPr',\n  fontNameTag: 'rFont'\n};\n\nutils.inherits(RichTextXform, BaseXform, {\n\n  get tag() { return 'r'; },\n\n  get textXform() { return this._textXform || (this._textXform = new TextXform()); },\n  get fontXform() { return this._fontXform || (this._fontXform = new FontXform(RichTextXform.FONT_OPTIONS)); },\n\n  render: function(xmlStream, model) {\n    model = model || this.model;\n\n    xmlStream.openNode('r');\n    if (model.font) {\n      this.fontXform.render(xmlStream, model.font);\n    }\n    this.textXform.render(xmlStream, model.text);\n    xmlStream.closeNode();\n  },\n\n  parseOpen: function(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case 'r':\n        this.model = {};\n        return true;\n      case 't':\n        this.parser = this.textXform;\n        this.parser.parseOpen(node);\n        return true;\n      case 'rPr':\n        this.parser = this.fontXform;\n        this.parser.parseOpen(node);\n        return true;\n      default:\n        return false;\n    }\n  },\n  parseText: function(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n  parseClose: function(name) {\n    switch (name) {\n      case 'r':\n        return false;\n      case 't':\n        this.model.text = this.parser.model;\n        this.parser = undefined;\n        return true;\n      case 'rPr':\n        this.model.font = this.parser.model;\n        this.parser = undefined;\n        return true;\n      default:\n        if (this.parser) {\n          this.parser.parseClose(name);\n        }\n        return true;\n    }\n  }\n});\n"]}