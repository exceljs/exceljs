{"version":3,"sources":["../../../../../lib/xlsx/xform/strings/phonetic-text-xform.js"],"names":["TextXform","require","RichTextXform","utils","BaseXform","PhoneticTextXform","module","exports","map","r","t","inherits","tag","render","xmlStream","model","openNode","sb","eb","hasOwnProperty","richText","forEach","text","closeNode","parseOpen","node","name","parser","parseInt","attributes","parseText","parseClose","rt","push","undefined"],"mappings":"AAAA;;;;;;AAMA;;AAEA,IAAIA,YAAYC,QAAQ,cAAR,CAAhB;AACA,IAAIC,gBAAgBD,QAAQ,mBAAR,CAApB;;AAEA,IAAIE,QAAQF,QAAQ,sBAAR,CAAZ;AACA,IAAIG,YAAYH,QAAQ,eAAR,CAAhB;;AAEA;AACA;AACA;;AAEA,IAAII,oBAAoBC,OAAOC,OAAP,GAAiB,YAAW;AAClD,OAAKC,GAAL,GAAW;AACTC,OAAG,IAAIP,aAAJ,EADM;AAETQ,OAAG,IAAIV,SAAJ;AAFM,GAAX;AAID,CALD;;AAQAG,MAAMQ,QAAN,CAAeN,iBAAf,EAAkCD,SAAlC,EAA6C;;AAE3C,MAAIQ,GAAJ,GAAU;AAAE,WAAO,KAAP;AAAe,GAFgB;;AAI3CC,UAAQ,gBAASC,SAAT,EAAoBC,KAApB,EAA2B;AACjCD,cAAUE,QAAV,CAAmB,KAAKJ,GAAxB,EAA6B;AAC3BK,UAAIF,MAAME,EAAN,IAAY,CADW;AAE3BC,UAAIH,MAAMG,EAAN,IAAY;AAFW,KAA7B;AAIA,QAAIH,SAASA,MAAMI,cAAN,CAAqB,UAArB,CAAT,IAA6CJ,MAAMK,QAAvD,EAAiE;AAC/D,UAAIX,IAAI,KAAKD,GAAL,CAASC,CAAjB;AACAM,YAAMK,QAAN,CAAeC,OAAf,CAAuB,UAASC,IAAT,EAAe;AACpCb,UAAEI,MAAF,CAASC,SAAT,EAAoBQ,IAApB;AACD,OAFD;AAGD,KALD,MAKO,IAAIP,KAAJ,EAAW;AAChB,WAAKP,GAAL,CAASE,CAAT,CAAWG,MAAX,CAAkBC,SAAlB,EAA6BC,MAAMO,IAAnC;AACD;AACDR,cAAUS,SAAV;AACD,GAlB0C;;AAoB3CC,aAAW,mBAASC,IAAT,EAAe;AACxB,QAAIC,OAAOD,KAAKC,IAAhB;AACA,QAAI,KAAKC,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYH,SAAZ,CAAsBC,IAAtB;AACA,aAAO,IAAP;AACD;AACD,QAAIC,SAAS,KAAKd,GAAlB,EAAuB;AACrB,WAAKG,KAAL,GAAa;AACXE,YAAIW,SAASH,KAAKI,UAAL,CAAgBZ,EAAzB,EAA6B,EAA7B,CADO;AAEXC,YAAIU,SAASH,KAAKI,UAAL,CAAgBX,EAAzB,EAA6B,EAA7B;AAFO,OAAb;AAIA,aAAO,IAAP;AACD;AACD,SAAKS,MAAL,GAAc,KAAKnB,GAAL,CAASkB,IAAT,CAAd;AACA,QAAI,KAAKC,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYH,SAAZ,CAAsBC,IAAtB;AACA,aAAO,IAAP;AACD;AACD,WAAO,KAAP;AACD,GAvC0C;AAwC3CK,aAAW,mBAASR,IAAT,EAAe;AACxB,QAAI,KAAKK,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYG,SAAZ,CAAsBR,IAAtB;AACD;AACF,GA5C0C;AA6C3CS,cAAY,oBAASL,IAAT,EAAe;AACzB,QAAI,KAAKC,MAAT,EAAiB;AACf,UAAI,CAAC,KAAKA,MAAL,CAAYI,UAAZ,CAAuBL,IAAvB,CAAL,EAAmC;AACjC,gBAAQA,IAAR;AACE,eAAK,GAAL;AACE,gBAAIM,KAAK,KAAKjB,KAAL,CAAWK,QAApB;AACA,gBAAI,CAACY,EAAL,EAAS;AAAEA,mBAAK,KAAKjB,KAAL,CAAWK,QAAX,GAAsB,EAA3B;AAAgC;AAC3CY,eAAGC,IAAH,CAAQ,KAAKN,MAAL,CAAYZ,KAApB;AACA;AACF,eAAK,GAAL;AACE,iBAAKA,KAAL,CAAWO,IAAX,GAAkB,KAAKK,MAAL,CAAYZ,KAA9B;AACA;AACF;AACE;AAVJ;AAYA,aAAKY,MAAL,GAAcO,SAAd;AACD;AACD,aAAO,IAAP;AACD;AACD,YAAQR,IAAR;AACE,WAAK,KAAKd,GAAV;AACE,eAAO,KAAP;AACF;AACE,eAAO,IAAP;AAJJ;AAMD;AAtE0C,CAA7C","file":"phonetic-text-xform.js","sourcesContent":["/**\n * Copyright (c) 2016 Guyon Roche\n * LICENCE: MIT - please refer to LICENCE file included with this module\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\n */\n\n'use strict';\n\nvar TextXform = require('./text-xform');\nvar RichTextXform = require('./rich-text-xform');\n\nvar utils = require('../../../utils/utils');\nvar BaseXform = require('../base-xform');\n\n// <rPh sb=\"0\" eb=\"1\">\n//   <t>(its pronounciation in KATAKANA)</t>\n// </rPh>\n\nvar PhoneticTextXform = module.exports = function() {\n  this.map = {\n    r: new RichTextXform(),\n    t: new TextXform()\n  };\n};\n\n\nutils.inherits(PhoneticTextXform, BaseXform, {\n\n  get tag() { return 'rPh'; },\n\n  render: function(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      sb: model.sb || 0,\n      eb: model.eb || 0\n    });\n    if (model && model.hasOwnProperty('richText') && model.richText) {\n      var r = this.map.r;\n      model.richText.forEach(function(text) {\n        r.render(xmlStream, text);\n      });\n    } else if (model) {\n      this.map.t.render(xmlStream, model.text);\n    }\n    xmlStream.closeNode();\n  },\n\n  parseOpen: function(node) {\n    var name = node.name;\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    if (name === this.tag) {\n      this.model = {\n        sb: parseInt(node.attributes.sb, 10),\n        eb: parseInt(node.attributes.eb, 10),\n      };\n      return true;\n    }\n    this.parser = this.map[name];\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    return false;\n  },\n  parseText: function(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n  parseClose: function(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        switch (name) {\n          case 'r':\n            var rt = this.model.richText;\n            if (!rt) { rt = this.model.richText = []; }\n            rt.push(this.parser.model);\n            break;\n          case 't':\n            this.model.text = this.parser.model;\n            break;\n          default:\n            break;\n        }\n        this.parser = undefined;\n      }\n      return true;\n    }\n    switch (name) {\n      case this.tag:\n        return false;\n      default:\n        return true;\n    }\n  }\n});\n"]}