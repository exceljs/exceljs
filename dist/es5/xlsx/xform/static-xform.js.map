{"version":3,"sources":["../../../../lib/xlsx/xform/static-xform.js"],"names":["utils","require","BaseXform","XmlStream","build","xmlStream","model","openNode","tag","$","c","forEach","child","t","writeText","closeNode","StaticXform","module","exports","_model","inherits","render","_xml","stream","xml","writeXml","parseOpen","parseText","parseClose","name"],"mappings":"AAAA;;;;;;AAMA;;AAEA,IAAIA,QAAQC,QAAQ,mBAAR,CAAZ;AACA,IAAIC,YAAYD,QAAQ,cAAR,CAAhB;AACA,IAAIE,YAAYF,QAAQ,wBAAR,CAAhB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,KAAT,CAAeC,SAAf,EAA0BC,KAA1B,EAAiC;AAC/BD,YAAUE,QAAV,CAAmBD,MAAME,GAAzB,EAA8BF,MAAMG,CAApC;AACA,MAAIH,MAAMI,CAAV,EAAa;AACXJ,UAAMI,CAAN,CAAQC,OAAR,CAAgB,UAASC,KAAT,EAAgB;AAC9BR,YAAMC,SAAN,EAAiBO,KAAjB;AACD,KAFD;AAGD;AACD,MAAIN,MAAMO,CAAV,EAAa;AACXR,cAAUS,SAAV,CAAoBR,MAAMO,CAA1B;AACD;AACDR,YAAUU,SAAV;AACD;;AAED,IAAIC,cAAcC,OAAOC,OAAP,GAAiB,UAASZ,KAAT,EAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,OAAKa,MAAL,GAAcb,KAAd;AACD,CARD;;AAUAN,MAAMoB,QAAN,CAAeJ,WAAf,EAA4Bd,SAA5B,EAAuC;AACrCmB,UAAQ,gBAAShB,SAAT,EAAoB;AAC1B,QAAI,CAAC,KAAKiB,IAAV,EAAgB;AACd,UAAIC,SAAS,IAAIpB,SAAJ,EAAb;AACAC,YAAMmB,MAAN,EAAc,KAAKJ,MAAnB;AACA,WAAKG,IAAL,GAAYC,OAAOC,GAAnB;AACD;AACDnB,cAAUoB,QAAV,CAAmB,KAAKH,IAAxB;AACD,GARoC;;AAUrCI,aAAW,qBAAW;AACpB,WAAO,IAAP;AACD,GAZoC;AAarCC,aAAW,qBAAW,CACrB,CAdoC;AAerCC,cAAY,oBAASC,IAAT,EAAe;AACzB,YAAQA,IAAR;AACE,WAAK,KAAKV,MAAL,CAAYX,GAAjB;AACE,eAAO,KAAP;AACF;AACE,eAAO,IAAP;AAJJ;AAMD;AAtBoC,CAAvC","file":"static-xform.js","sourcesContent":["/**\n * Copyright (c) 2016 Guyon Roche\n * LICENCE: MIT - please refer to LICENCE file included with this module\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\n */\n\n'use strict';\n\nvar utils = require('../../utils/utils');\nvar BaseXform = require('./base-xform');\nvar XmlStream = require('../../utils/xml-stream');\n\n// var model = {\n//   tag: 'name',\n//   $: {attr: 'value'},\n//   c: [\n//     { tag: 'child' }\n//   ],\n//   t: 'some text'\n// };\n\nfunction build(xmlStream, model) {\n  xmlStream.openNode(model.tag, model.$);\n  if (model.c) {\n    model.c.forEach(function(child) {\n      build(xmlStream, child);\n    });\n  }\n  if (model.t) {\n    xmlStream.writeText(model.t);\n  }\n  xmlStream.closeNode();\n}\n\nvar StaticXform = module.exports = function(model) {\n  // This class is an optimisation for static (unimportant and unchanging) xml\n  // It is stateless - apart from its static model and so can be used as a singleton\n  // Being stateless - it will only track entry to and exit from it's root xml tag during parsing and nothing else\n  // Known issues:\n  //    since stateless - parseOpen always returns true. Parent xform must know when to start using this xform\n  //    if the root tag is recursive, the parsing will behave unpredictably\n  this._model = model;\n};\n\nutils.inherits(StaticXform, BaseXform, {\n  render: function(xmlStream) {\n    if (!this._xml) {\n      var stream = new XmlStream();\n      build(stream, this._model);\n      this._xml = stream.xml;\n    }\n    xmlStream.writeXml(this._xml);\n  },\n\n  parseOpen: function() {\n    return true;\n  },\n  parseText: function() {\n  },\n  parseClose: function(name) {\n    switch (name) {\n      case this._model.tag:\n        return false;\n      default:\n        return true;\n    }\n  }\n});\n"]}