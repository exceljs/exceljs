{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/auto-filter-xform.js"],"names":["utils","require","colCache","BaseXform","AutoFilterXform","module","exports","inherits","tag","render","xmlStream","model","leafNode","ref","getAddress","addr","row","column","address","firstAddress","from","secondAddress","to","parseOpen","node","name","attributes"],"mappings":"AAAA;;;;;;AAMA;;AAEA,IAAIA,QAAQC,QAAQ,sBAAR,CAAZ;AACA,IAAIC,WAAWD,QAAQ,0BAAR,CAAf;AACA,IAAIE,YAAYF,QAAQ,eAAR,CAAhB;;AAEA,IAAIG,kBAAkBC,OAAOC,OAAP,GAAiB,YAAW,CACjD,CADD;;AAGAN,MAAMO,QAAN,CAAeH,eAAf,EAAgCD,SAAhC,EAA2C;;AAEzC,MAAIK,GAAJ,GAAU;AAAE,WAAO,YAAP;AAAsB,GAFO;;AAIzCC,UAAQ,gBAASC,SAAT,EAAoBC,KAApB,EAA2B;AACjC,QAAIA,KAAJ,EAAW;AACT,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACAD,kBAAUE,QAAV,CAAmB,YAAnB,EAAiC,EAACC,KAAKF,KAAN,EAAjC;AACD,OAHD,MAGO;AACL,YAAIG,aAAa,SAAbA,UAAa,CAASC,IAAT,EAAe;AAC9B,cAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,mBAAOA,IAAP;AACD;AACD,iBAAOb,SAASY,UAAT,CAAoBC,KAAKC,GAAzB,EAA8BD,KAAKE,MAAnC,EAA2CC,OAAlD;AACD,SALD;;AAOA,YAAIC,eAAeL,WAAWH,MAAMS,IAAjB,CAAnB;AACA,YAAIC,gBAAgBP,WAAWH,MAAMW,EAAjB,CAApB;AACA,YAAIH,gBAAgBE,aAApB,EAAmC;AACjCX,oBAAUE,QAAV,CAAmB,YAAnB,EAAiC,EAACC,KAAKM,eAAe,GAAf,GAAqBE,aAA3B,EAAjC;AACD;AACF;AACF;AACF,GAxBwC;;AA0BzCE,aAAW,mBAASC,IAAT,EAAe;AACxB,QAAIA,KAAKC,IAAL,KAAc,YAAlB,EAAgC;AAC9B,WAAKd,KAAL,GAAaa,KAAKE,UAAL,CAAgBb,GAA7B;AACD;AACF;AA9BwC,CAA3C","file":"auto-filter-xform.js","sourcesContent":["/**\n * Copyright (c) 2015 Guyon Roche\n * LICENCE: MIT - please refer to LICENCE file included with this module\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\n */\n\n'use strict';\n\nvar utils = require('../../../utils/utils');\nvar colCache = require('../../../utils/col-cache');\nvar BaseXform = require('../base-xform');\n\nvar AutoFilterXform = module.exports = function() {\n};\n\nutils.inherits(AutoFilterXform, BaseXform, {\n\n  get tag() { return 'autoFilter'; },\n\n  render: function(xmlStream, model) {\n    if (model) {\n      if (typeof model === 'string') {\n        // assume range\n        xmlStream.leafNode('autoFilter', {ref: model});\n      } else {\n        var getAddress = function(addr) {\n          if (typeof addr === 'string') {\n            return addr;\n          }\n          return colCache.getAddress(addr.row, addr.column).address;\n        };\n\n        var firstAddress = getAddress(model.from);\n        var secondAddress = getAddress(model.to);\n        if (firstAddress && secondAddress) {\n          xmlStream.leafNode('autoFilter', {ref: firstAddress + ':' + secondAddress});\n        }\n      }\n    }\n  },\n\n  parseOpen: function(node) {\n    if (node.name === 'autoFilter') {\n      this.model = node.attributes.ref;\n    }\n  }\n});\n"]}