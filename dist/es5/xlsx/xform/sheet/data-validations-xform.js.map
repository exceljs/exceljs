{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/data-validations-xform.js"],"names":["_","require","utils","BaseXform","assign","definedName","attributes","name","defaultValue","value","undefined","parseBool","assignBool","DataValidationsXform","module","exports","inherits","tag","render","xmlStream","model","count","Object","keys","length","openNode","each","address","type","addAttribute","operator","allowBlank","showInputMessage","promptTitle","prompt","showErrorMessage","errorStyle","errorTitle","error","formulae","forEach","formula","index","writeText","dateToExcel","closeNode","parseOpen","node","_address","sqref","_definedName","_formula","parseText","text","push","parseClose","join","parseInt","parseFloat","excelToDate"],"mappings":"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","file":"data-validations-xform.js","sourcesContent":["/**\n * Copyright (c) 2016 Guyon Roche\n * LICENCE: MIT - please refer to LICENCE file included with this module\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\n */\n\n'use strict';\n\nvar _ = require('../../../utils/under-dash');\nvar utils = require('../../../utils/utils');\nvar BaseXform = require('../base-xform');\n\nfunction assign(definedName, attributes, name, defaultValue) {\n  var value = attributes[name];\n  if (value !== undefined) {\n    definedName[name] = value;\n  } else if (defaultValue !== undefined) {\n    definedName[name] = defaultValue;\n  }\n}\nfunction parseBool(value) {\n  switch (value) {\n    case '1':\n    case 'true':\n      return true;\n    default:\n      return false;\n  }\n}\nfunction assignBool(definedName, attributes, name, defaultValue) {\n  var value = attributes[name];\n  if (value !== undefined) {\n    definedName[name] = parseBool(value);\n  } else if (defaultValue !== undefined) {\n    definedName[name] = defaultValue;\n  }\n}\n\nvar DataValidationsXform = module.exports = function() {\n};\n\nutils.inherits(DataValidationsXform, BaseXform, {\n\n  get tag() { return 'dataValidations'; },\n\n  render: function(xmlStream, model) {\n    var count = model && Object.keys(model).length;\n    if (count) {\n      xmlStream.openNode('dataValidations', {count: count});\n\n      _.each(model, function(value, address) {\n        xmlStream.openNode('dataValidation');\n        if (value.type !== 'any') {\n          xmlStream.addAttribute('type', value.type);\n\n          if (value.operator && (value.type !== 'list') && (value.operator !== 'between')) {\n            xmlStream.addAttribute('operator', value.operator);\n          }\n          if (value.allowBlank) {\n            xmlStream.addAttribute('allowBlank', '1');\n          }\n        }\n        if (value.showInputMessage) {\n          xmlStream.addAttribute('showInputMessage', '1');\n        }\n        if (value.promptTitle) {\n          xmlStream.addAttribute('promptTitle', value.promptTitle);\n        }\n        if (value.prompt) {\n          xmlStream.addAttribute('prompt', value.prompt);\n        }\n        if (value.showErrorMessage) {\n          xmlStream.addAttribute('showErrorMessage', '1');\n        }\n        if (value.errorStyle) {\n          xmlStream.addAttribute('errorStyle', value.errorStyle);\n        }\n        if (value.errorTitle) {\n          xmlStream.addAttribute('errorTitle', value.errorTitle);\n        }\n        if (value.error) {\n          xmlStream.addAttribute('error', value.error);\n        }\n        xmlStream.addAttribute('sqref', address);\n        (value.formulae || []).forEach(function(formula, index) {\n          xmlStream.openNode('formula' + (index + 1));\n          if (value.type === 'date') {\n            xmlStream.writeText(utils.dateToExcel(formula));\n          } else {\n            xmlStream.writeText(formula);\n          }\n          xmlStream.closeNode();\n        });\n        xmlStream.closeNode();\n      });\n      xmlStream.closeNode();\n    }\n  },\n  parseOpen: function(node) {\n    switch (node.name) {\n      case 'dataValidations':\n        this.model = {};\n        return true;\n\n      case 'dataValidation':\n        this._address = node.attributes.sqref;\n        var definedName = this._definedName = node.attributes.type ? {\n            type: node.attributes.type,\n            formulae: []\n          } : {\n            type: 'any'\n          };\n\n        if (node.attributes.type) {\n          assignBool(definedName, node.attributes, 'allowBlank');\n        }\n        assignBool(definedName, node.attributes, 'showInputMessage');\n        assignBool(definedName, node.attributes, 'showErrorMessage');\n\n        switch (definedName.type) {\n          case 'any':\n          case 'list':\n          case 'custom':\n            break;\n          default:\n            assign(definedName, node.attributes, 'operator', 'between');\n            break;\n        }\n        assign(definedName, node.attributes, 'promptTitle');\n        assign(definedName, node.attributes, 'prompt');\n        assign(definedName, node.attributes, 'errorStyle');\n        assign(definedName, node.attributes, 'errorTitle');\n        assign(definedName, node.attributes, 'error');\n        return true;\n      case 'formula1':\n      case 'formula2':\n        this._formula = [];\n        return true;\n      \n      default:\n        return false;\n    }\n  },\n  parseText: function(text) {\n    this._formula.push(text);\n  },\n  parseClose: function(name) {\n    switch (name) {\n      case 'dataValidations':\n        return false;\n      case 'dataValidation':\n        if (!this._definedName.formulae || !this._definedName.formulae.length) {\n          delete this._definedName.formulae;\n          delete this._definedName.operator;\n        }\n        this.model[this._address] = this._definedName;\n        return true;\n      case 'formula1':\n      case 'formula2':\n        var formula = this._formula.join('');\n        switch (this._definedName.type) {\n          case 'whole':\n          case 'textLength':\n            formula = parseInt(formula, 10);\n            break;\n          case 'decimal':\n            formula = parseFloat(formula);\n            break;\n          case 'date':\n            formula = utils.excelToDate(parseFloat(formula));\n            break;\n          default:\n            break;\n        }\n        this._definedName.formulae.push(formula);\n        return true;\n      default:\n        return true;\n    }\n  }\n});\n"]}